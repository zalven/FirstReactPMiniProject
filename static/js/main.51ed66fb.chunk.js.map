{"version":3,"sources":["Components/practice.js","App.js","serviceWorker.js","index.js"],"names":["MyPract","props","darkMode","event","document","getElementById","setAttribute","lightMode","handleComputedValues","preventDefault","CalButtonClicked","value","state","CalculatorValue","computedValues","isOperatorClicked","isEqualsClcked","parseFloat","includes","calVal","isNaN","result","replace","eval","err","setState","styleOperator","color","deleteButton","this","className","action","onClick","type","name","placeholder","style","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.51ed66fb.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {useState} from 'react';\r\nimport '../StyleSheets/style.css';\r\n\r\n\r\nclass   MyPract extends Component{\r\n \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            CalculatorValue:'',\r\n            computedValues:'',\r\n            isOperatorClicked:false,\r\n            isEqualsClcked: false,\r\n        }\r\n    }\r\n    darkMode = (event) =>{\r\n        document.getElementById(\"toggleScreenMode\").setAttribute('href', 'darkModeToggle.css' );\r\n        document.getElementById(\"screenMode\").setAttribute('href', 'darkMode.css' );\r\n    }\r\n    lightMode = (event) =>{\r\n        document.getElementById(\"toggleScreenMode\").setAttribute('href', 'lightModeToggle.css' );\r\n        document.getElementById(\"screenMode\").setAttribute('href', 'lightMode.css');\r\n    }\r\n    handleComputedValues = (event) =>{\r\n        event.preventDefault();\r\n    }\r\n    CalButtonClicked = (value) => {\r\n        if(value === 'CE'){  this.state. CalculatorValue  = ''; }\r\n        else if(value == 'C'){\r\n            this.state. CalculatorValue = '';\r\n            this.state.computedValues = '';\r\n            this.state.isOperatorClicked = false;\r\n            this.state.isEqualsClcked = false;\r\n        }else if(value == '%'){\r\n            if(this.state.CalculatorValue != ''){\r\n                this.state. CalculatorValue = parseFloat(this.state. CalculatorValue, 10);\r\n                this.state. CalculatorValue /= 100;\r\n                this.state.isOperatorClicked = false;\r\n                this.state.isEqualsClcked = false;\r\n            }\r\n        }else if ('+-x/%'.includes(value)){\r\n            if(this.state.isEqualsClcked == true){this.state.isOperatorClicked = false}\r\n            var calVal = this.state.CalculatorValue;\r\n            if (!isNaN(calVal) && calVal != '' ){ \r\n                if(this.state.isOperatorClicked == false){\r\n                    this.state. CalculatorValue = parseFloat(this.state. CalculatorValue, 10) ;\r\n                    var result = (this.state.computedValues+this.state. CalculatorValue).replace(/x/g,'*');\r\n                    this.state.computedValues +=this.state. CalculatorValue+\" \"+ value+\" \";\r\n                    this.state.isOperatorClicked = true;\r\n                    try {this.state. CalculatorValue = eval(result); }\r\n                    catch(err) {this.state. CalculatorValue = \"syntax error\"}\r\n\r\n                }else{\r\n    \r\n                }\r\n\r\n            }else{\r\n                \r\n            }\r\n            \r\n        }else if(value === \"=\"){\r\n\r\n            \r\n            this.state. CalculatorValue = parseFloat(this.state. CalculatorValue, 10) ;\r\n            var result = (this.state.computedValues+this.state.CalculatorValue).replace(/x/g,'*') ;\r\n            \r\n            this.state.computedValues = '';\r\n            try {this.state. CalculatorValue =eval(result); }\r\n            catch(err) {this.state. CalculatorValue = \"syntax error\"}\r\n            this.state.isEqualsClcked = true;\r\n            this.state.isOperatorClicked = true;\r\n\r\n\r\n\r\n        }else{\r\n            if(this.state.isOperatorClicked == false){\r\n                this.state. CalculatorValue += value;\r\n                \r\n            }else{\r\n                this.state. CalculatorValue = value;\r\n                this.state.isOperatorClicked = false;\r\n            }\r\n            this.state.isEqualsClcked = false;\r\n        }\r\n        this.setState({\r\n            CalculatorValue:this.state. CalculatorValue\r\n        });\r\n      \r\n        // console.log(this.state.value+\" ---- \"+this.state.computedValues);\r\n    }\r\n    render(){\r\n        const styleOperator= {color:\" #1da1f2\"}\r\n        const deleteButton = {color:\" #e0245e\"}\r\n        const {CalculatorValue} = this.state;\r\n        const {computedValues}= this.state;\r\n\r\n        return(\r\n            <div className = \"mainCalculator\"> \r\n                <form className = \"toggle\" action =\"#\">\r\n                    <input onClick = {this.lightMode} type=\"radio\" name = \"screenMode\"/>\r\n                    <input onClick = {this.darkMode}  type=\"radio\" name = \"screenMode\" />\r\n                </form>\r\n                <div className = \"calculator\">\r\n                    <input  className = \"calcValues\" type=\"text\" placeholder=\"0\"  value = {computedValues}/>\r\n                    <input  className = \"calcResult\" type=\"text\" placeholder=\"0\" value = {CalculatorValue} />\r\n                    <button onClick = {() => this.CalButtonClicked( \"C\")}    className = \"deleteButton\"      style = {deleteButton}>         <h1>    C   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked(\"CE\")}    className = \"deleteButton\"      style = {deleteButton}>         <h1>    CE  </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"%\")}    className = \"operatorButton\"    style = {styleOperator}>        <h1>    %   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"/\")}    className = \"operatorButton\"    style = {styleOperator}>        <h1>    /   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"7\")}    className = \"numberButton\"      >                               <h1>    7   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"8\")}    className = \"numberButton\"      >                               <h1>    8   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"9\")}    className = \"numberButton\"      >                               <h1>    9   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"x\")}    className = \"operatorButton\"    style = {styleOperator}>        <h1>    X   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"4\")}    className = \"numberButton\"      >                               <h1>    4   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"5\")}    className = \"numberButton\"      >                               <h1>    5   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"6\")}    className = \"numberButton\"      >                               <h1>    6   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"-\")}    className = \"operatorButton\"    style = {styleOperator}>        <h1>    -   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"1\")}    className = \"numberButton\"      >                               <h1>    1   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"2\")}    className = \"numberButton\"      >                               <h1>    2   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"3\")}    className = \"numberButton\"      >                               <h1>    3   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"+\")}    className = \"operatorButton\"    style = {styleOperator}>        <h1>    +   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"0\")}    className = \"numberButton\"      id =  \"zeroButton\">             <h1>    0   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \".\")}    className = \"operatorButton\"    style = {styleOperator}>        <h1>    .   </h1></button>\r\n                    <button onClick = {() => this.CalButtonClicked( \"=\")}    className = \"operatorButton\"    style = {styleOperator}>        <h1>    =   </h1></button>\r\n                </div>\r\n            </div>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default MyPract;\r\n","import React from 'react';\nimport './App.css';\nimport MyPract from './Components/practice'\n\nfunction App() {\n\n  return(\n    <div>\n    \n      <MyPract/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}